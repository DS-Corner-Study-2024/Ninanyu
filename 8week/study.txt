8 Hooks

useState
useState는 가장 기본적인 Hook이며, 함수형 컴포넌트에서도 가변적인 상태를 지닐 수 있게 해 준다.
만약 함수형 컴포넌트에서 상태를 관리해야 한다면 이 Hook을 사용하면 된다.

카운터 앱 구현(week7에서 구현한 counter와 동일함)


- src 폴더에 Counter.js 파일 생성
import React, {useState} from 'react';

const Counter = () => {
    const [value, setValue] = useState(0);

    return(
        <div>
            <p>
                현재 카운터 값은 <b>{value}</b>입니다.
            </p>
            <button onClick={()=> setValue(value+1)}> +1 </button>
            <button onClick={()=> setValue(value-1)}> -1 </button>
        </div>
    );
};

export default Counter;

useState는 코드 상단에서 import 구문을 통해 불러오고, const[value,setValue] = useState(0);과 같이 사용한다.
useState 함수의 파라미터에는 상태의 기본값을 넣어 준다. 배열을 첫 번째 원소는 사태 값, 두 번째 원소는 상태를 설정하는 함수다.
이 함수에 파라미터를 넣어서 호출하면 전달받은 파라미터로 값이 바뀌고 컴포넌트가 정상적으로 리렌더링 된다.


- app.js에 counter 컴포넌트를 렌더링
import './App.css';
import Counter from './Counter';

const App =() => {
  return <Counter/>;
};

export default App;


- useState를 여러 번 사용하기
하나의 useState 함수는 하나의 상태 값만 관리할 수 있다. 컴포넌트에서 관리해야 할 상태가 여러 개라면 useState를 여러 번 사용하면 된다.

src 디렉터리에 Info.js 파일 생성 후 코드 작성
import React, {useState} from 'react';

const Info = () => {
    const [name, setName] = useState('');
    const [nickname, setNickname] = useState('');

    const onChangeName = e => {
        setName(e.target.value);
    };

    const onChangeNickname = e => {
        setNickname(e.target.value);
    };

    return (
        <div>
            <div>
                <input value ={name} onChange={onChangeName} />
                <input value={nickname} onChange={onChangeNickname} />
            </div>
            <div>
                <div>
                    <b>이름:</b> {name}
                </div>
                <div>
                <b>닉네임:</b> {nickname}
                </div>
            </div>
        </div>
    );
};

export default Info;

=> 앱에서 렌더링
import React from 'react';
import Info from './Info';
 
const App = () => {
  return <Info />;
};
 
export default App;


- useEffect (7주차 스터디 한 것과 동일한 내용)
리액트 컴포넌트가 렌더링될 때마다 특정 작업을 수행하도록 설정할 수 있는 Hook
클래스형 컴포넌트의 componentDidMount와 componentDidUpdate를 합친 형태로 보아도 무방함.

Info.js 파일에
  useEffect(() => {
    console.log('렌더링이 완료되었습니다!');
    console.log({
      name,
      nickname
    });
  });

위 코드 추가.


- 마운트될 때만 실행하고 싶을 때
useEffect에서 설정한 함수를 컴포넌트가 화면에 맨 처음 렌더링될 때만 실행하고, 업데이트될 때는 실행하지 않으려면 함수의 두 번째 파라미터로 비어 있는 
배열을 넣어주면 된다.

기존 useEffect 코드를 
useEffect(() => {
    console.log('마운트될 때만 실행됩니다.');
  }, []);

와 같이 변경.

변경 뒤 브라우저를 열어 인풋을 수정하면 컴포넌트가 처음 나타날 때만 콘솔에 문구가 나타나고,
그 이후에는 나타나지 않는다.


- 특정 값이 업데이트될 때만 실행하고 싶을 때
useEffect를 사용할 때, 특정 값이 변경될 때만 호출하고 싶은 경우 클래스형 컴포넌트라면

componentDidUpdate(prevProps, prevState) {
if (prevProps.value != = this.props.value) {
  doSomething();
}
}

이와 같이 작성한다. 이 코드는 props 안에 들어 있는 value 값이 바뀔 때만 특정 작업을 수행한다.
이러한 작업을 useEffect에서 해야한다면, useEffect의 두 번째 파라미터로 전달되는 배열 안에 검사하고 싶은 값을 넣어 주면 되낟.

Info.js의 useEffect부분을 
useEffect(() => {
    console.log(name);
  }, [name]);

이와 같이 변경

배열 안에는 useState를 통해 관리하고 있는 사태를 넣어 주어도 되고, props로 전달받은 값을 넣어 주어도 된다.


- 뒷정리하기
useEffect는 기본적으로 렌더링되고 난 직후마다 실행되며, 두 번째 파라미터 배열에 무엇을 넣는지에 따라 실행되는 조건이 달라진다.
컴포넌트가 언마운트되기 전이나 업데이트되기 직전에 어떠한 작업을 수행하고 싶다면 useEffect에서 뒷정리(cleanup)함수를 반환해 주어야 한다.

Info컴포넌트의 useEffect를 
useEffect(() => {
    console.log('effect');
    console.log(name);
    return () => {
      console.log('cleanup');
      console.log(name);
    };
  });

이와 같이 변경한다.

이제 App 컴포넌트에서 Info 컴포넌트의 가시성을 바꿀 수 있게 한다. 이번에도 useState를 사용하여 사태를 관리한다.

import React, { useState } from 'react';
import Info from './Info';
 
const App = () => {
const [visible, setVisible] = useState(false);
return (
  <div>
      <button
      onClick={() => {
        setVisible(!visible);
        }}
      >
        {visible ? '숨기기' : '보이기'}
      </button>
      <hr />
    {visible && <Info />}
    </div>
);
};
 
export default App;

컴포넌트가 나타날 때 콘솔에 effect가 나타나고, 사라질 때 cleanup이 나타난다.
인풋에 이름을 적어 보고 콘솔을 확인하면 렌더링될 때마다 뒷정리 함수가 계속 나타나는 것을 확인할 수 있다.
그리고 뒷정리 함수가 호출될 대는 업데이트되기 직전의 값을 보여 준다.

언마운트될 때만 뒷정리 함수를 호출하고 싶다면 useEffect 합수의 두 번째 파라미터에 비어 있는 배열을 넣으면 된다.


- useReducer
useReducer는 useState보다 더 다양한 컴포넌트 상황에 따라 다양한 상태를 다른 값으로 업데이트해 주고 싶을 때 사용하는 Hook이다.
리듀서는 현재 상태, 그리고 업데이트를 위해 필요한 정보를 담은 액션 값을 전달받아 새로운 상태를 반환하는 함수다. 
리듀서 함수에서 새로운 상태를 만들 때는 반드시 불변성을 지켜 줘야 한다.

function reducer(state,action){
    return {...}; // 불변성을 지키면서 업데이트한 새로운 상태를 반환한다.
}

액션 값은 주로 다음과 같은 형태로 이루어져 있따.

{
    type: 'INCREMENT',
    // 다른 값들이 필요하다면 추가로 들어감
}

useReducer에서 사용하는 액션 객체는 반드시 type을 지니고 있을 필요가 없다. 객체가 아니라 문자열이나 숫자여도 상관없다.

- 카운터 구현하기
먼저 useReducer를 사용하여 기존의 Counter 컴포넌트를 다시 구현하겠다.
import React, { useReducer } from 'react';
 
function reducer(state, action) {
  // action.type에 따라 다른 작업 수행
  switch (action.type) {
    case 'INCREMENT':
      return { value: state.value + 1 };
    case 'DECREMENT':
      return { value: state.value - 1 };
    default:
      // 아무것도 해당되지 않을 때 기존 상태 반환
      return state;
  }
}
 
const Counter = () => {
  const [state, dispatch] = useReducer(reducer, { value: 0 });
 
  return (
    <div>
      <p>
        현재 카운터 값은 <b>{state.value}</b>입니다.
      </p>
      <button onClick={() => dispatch({ type: 'INCREMENT' })}>+1</button>
      <button onClick={() => dispatch({ type: 'DECREMENT' })}>-1</button>
    </div>
  );
};
 
export default Counter;

useReducer의 첫 번째 파라미터에는 리듀서 함수를 넣고, 두 번째 파라미터에는 해당 리듀서의 기본값을 넣어 준다.
이 Hook을 사용하녀 state 값과 dispatch 함수를 받아 오는데 여기서 state는 현재 가리키고 있는 상태고,
dispatch는 액션을 발생시키는 함수다. dispatch(action)와 같은 형태로, 함수 안에 파라미터로 액션 값ㅇ르 넣어 주면 리듀서 함수가 
호출되는 구조다.

useReducer를 사용했을 떄의 가장 큰 장점은 컴포넌트 업데이트 로직을 컴포넌트 바깥으로 빼낼 수 있다는 것이다.


- 인풋 상태 관리하기
