16.1.1액션

상태에 어떠한 변화가 필요하면 액션(action)이란 것이 발생한다. 이는 하나의 객체로 표현되다. 액션 객체는 다음과 같은 형식으로 이루어져 있다.

{
  type: 'TOGGLE_VALUE'
}
액션 객체는 type 필드를 반드시 가지고 있어야 한다. 이 값을 액션의 이름이라고 생각하면 된다. 그리고 그 외의 값들은 나중에 상태 업데이트를 
할 때 참고해야 할 값이며, 작성자 마음대로 넣을 수 있다.

예시 액션을 한번 살펴볼자

{
  type: 'ADD_TODO',
  data: {
    id: 1,
    text: '리덕스 배우기'
}
}

{
  type: 'CHANGE_INPUT',
  text: '안녕하세요'
}


16.1.2 액션 생성 함수

액션 생성 함수(action creator)는 액션 객체를 만들어 주는 함수다.

function addTodo(data) {
return {
    type: 'ADD_TODO',
  data
};
}

// 화살표 함수로도 만들 수 있다.
const changeInput = text => ({ 
  type: 'CHANGE_INPUT',
text
});
어떤 변화를 일으켜야 할 때마다 액션 객체를 만들어야 하는데 매번 액션 객체를 직접 작성하기 번거로울 수 있고, 만드는 과정에서 실수로 정보를 
놓칠 수도 있다. 이러한 일을 방지하기 위해 이를 함수로 만들어서 관리한다.


16.1.3 리듀서

리듀서(reducer)는 변화를 일으키는 함수다. 액션을 만들어서 발생시키면 리듀서가 현재 상태와 전달받은 액션 객체를 파라미터로 받아 온다. 그리고 
두 값을 참고하여 새로운 상태를 만들어서 반환해 준다.

리듀서 코드는 다음과 같은 형태로 이루어져 있다.

const initialState = {
  counter: 1
};
function reducer(state = initialState, action) {
switch (action.type) {
  case INCREMENT:
    return {
        counter: state.counter + 1
    };
  default:
    return state;
}
}