[카운터] 앱 만들기

1. 프로젝트 준비하기
- 요구사항 분석하기
[카운터]엡은 하나의 페이지이며, 'Simple Counter'라고 적힌 제목을 제외하면 두 개의 영역으로 나누어져 있다.
첫 번째 영역은 현재의 카운트를 표시한다. 따라서 이 영역의 이름을 뷰어라고 하며, 두 번째 영역에는 카운트를 늘리거나 줄일 수 있는 6개의
버튼이 가지런히 놓여 있으므로 컨트롤러라 이름을 붙이겠다.

- 컴포넌트 단위로 생각하기
앞서 살핀 컨트롤러와 뷰어 영역을 일종의 컴포넌트라고 생각한다 이 프로젝트에는 3개의 컴포넌트가 있다.
(1)App 컴포넌트: Viewer와 Controller 컴포넌트를 감싸는 텝플릿
(2)Viewer 컴포넌트: 현재의 카운트를 표시함
(3)Controller 컴포넌트: 카운트를 제어할 수 있는 기능을 제공함
하나의 컴포넌트는 단 하나의 역할만 수행한다.

- 리액트 앱 만들기
(5강과 동일하게 진행): 사용하지 않는 코드 사제 및 수정


2. UI 구현하기
UI: 사용자 인터페이스라는 뜻으로, 웹 페이지에서 상호작용하는 요소

- Viewer 컴포넌트 만들기
src에 component 폴더를 만들고, Viewer.js 생성
Viewer 컴포넌트를 페이지에 렌더링하기 위해서 App의 자식으로 배치해야한다.

- Controller 컴포넌트 만들기
controller 컴포넌트 만든 후 app.js를 수정해서 버튼 만들기.

- 컴포넌트 스타일링하기
자신이 원하는 스타일을 app.css를 수정하여 만들기


3. 기능 구현하기
- State를 이용해 카운터 기능 구현하기
구현해야할 카운터의 기능: Controller 컴포넌트에 있는 버튼을 클릭하면, Viwer 컴포넌트에 있는 카운트가 증가하거나 감소해야 한다.
버튼 크릭 이벤트가 발생했을 때 컴포넌트 값을 동적으로 렌더링하려면 리액트의 State를 사용해야한다.
먼저 카운트를 관리할 State를 만들고 초깃값을 0으로 설정한다. 다음으로 Controller컴포넌트의 버튼을 클릭하면 현재 State 값을 버튼이 전달하는 값과
계산해 변경한다. 다음으로 변경된 State 값은 Viwer 컴포넌트에 전달되어 페이지의 카운트값을 업데이트 한다.

- State는 어떤 컴포넌트에 만들까?
State는 반드시 컴포넌트 함수 안에 만들어야 한다. 현재 [카운터]앱에는 App, Viewer, Controller 3개의 컴포넌트가 있다.
[카운터]앱의 Sate는 App 컴포넌트에서 만들어야한다.
오답1: Viwer 컴포넌트
Controller 컴포넌트에서 버튼을 클릭하면 set 함수인 setCount를 호출해야 한다. 그런데 여기서 문제가 생긴다.
Viewer 컴포넌트가 Controller 컴포넌트에 setCount를 전달할 방법이 없다. 리액트에서 컴포넌트가 다른 컴포넌트에 데이터를 전달할 때는 
Props를 사용하는데, Props는 부모만이 자식에게 전달할 수 있다. Viewer와 Controller 컴포넌트는 부모-자식 관계까 아니므로 어떠한 값도 전달할 수 없다.
오답2: Controller 컴포넌트
버튼을 클릭하면 State는 기존 값에서 해당 버튼의 숫자와 계산한 값으로 변경된다. 그러나 여기서도 문제가 있다. 변경된 State 값을 Viewer컴포넌트에
전달할 방법이 없기 때문이다. 다시 말해 State 변수 count를 Viewer 컴포넌트에 전달해야 하는데, Viewer와 Controller 컴포넌트는 부모-자식 관계가
아니므로 그렇게 할 수 없다.

정답: App 컴포넌트
App.js를 수정 -> Viewer 컴포넌트에서 App에서 받은 Props를 페이지에 렌더링->App 컴포넌트에서 받은 Props를 페이지에 렌더링
리액트에서는 부모가 리렌더되거나 전달된 Props가 변경되면 자식 컴포넌트도 자동으로 리렌더 된다. 따라서 Viwer 컴포넌트는
Props로 받은 STate 값이 변경될 때마다 리렌더되어 실시간으로 이 값을 페이지에 렌더링한다.
App 컴포넌트에서 함수 handleSetCount를 받아 버튼의 이벤트 핸들러로 사용ㅎ나다. 버튼을 클릭하면 함수 handleSetCount를 호출하는데,
이 함수는 App 컴포넌트의 State 값을 업데이트한다.

리액트는 State 값이나 set함수를 여러 컴포넌트에서 사용하는 경우, 이들을 상위 컴포넌트에서 관리한다.
리액트에서는 이 기능을 다르 말로 'State 끌어올리기'라고 한다.

- 리액트답게 설계하기
리액트는 규모가 크고 빠른 우베 애플리케이션을 만들기 좋은 기술이다.
리액트에서 컴포넌트 간에 데이터를 전달할 때는 Props를 사용하는데, 전달 방향은 언제나 부모로부터 자식에게 전달하는 방식이다. 리액트의이런 데이터
전달 특징을 '단방향 데이터 흐름'이라고 한다. 단방향 데이터 전달은 데이터의 흐름을 쉽게 이해할 수 있어, 관리하기에 좋다.
반면 State를 변경하는 이벤트는 자식에서 부모를 향해 역방향으로 전달되어야한다.

이번에 만든 [카운터]앱에서는 Controller 컴포넌트에 있는 버튼 요소를 클릭할 때마다 App 컴포넌트의 State를 변경하는 함수를 Props로 전달해 자식이
부모의 State를 대신 업데이트하게 했다. 결론적으로 리액트 앱을 설계할 때는 데이터는 위에서 아래로, 이벤트는 아래에서 위로 향하도록 설계해야한다.