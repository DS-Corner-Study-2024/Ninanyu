이벤트 처리하기
- 이벤트 == 웹 페이지에서 일어나는 사용자의 행위 (버튼 클릭, 페이지 스크롤, 새로고침 등)

- 이벤트 핸들링과 이벤트 핸들러
이벤트 핸들링은 이벤트가 발생하면 특정 코드가 동작하도록 만드는 작업이다. 리액트를 사용하지 않고 HTML과 자바스크립트만으로
이벤트를 핸들링하는 예

<script>
    function handleOnClick(){
        alert("button clicked!");
    }
</script>

<button onclick="handleOnClick()">
    Click Me!
</button>

handleOnClick을 이벤트를 처리하는 함수라는 의미에서 '이벤트 핸들러'라고 한다.

- 리액트의 이벤트 핸들링
Body컴포넌트에 버튼을 하나 만들고, 버튼을 클릭하는 이벤트가 발생하면 실행되는 이벤트 핸들러
(Body 컴포넌트)

function Body(){
  function handleOnClick(){
    alert("버튼을 클릭하셨군요!");
  }
  return (
    <div className="body">
      <button onClick={handleOnClick}>클릭하세요</button>
    </div>
  );
}
  export default Body;

리액트의 이벤트 핸들링은 HTML의 이벤트 핸들링과 흡사하지만, 차이점이 존재
- 이벤트 핸들러 표기에서 HTML은 onclick이지만 리엑트는 카멜 케이스 문법에 따라 onClick으로 표기
- Props로 전달할 값을 지정할 때처럼 onClcik={}문법으로 이벤트 핸들러를 설정
- 이벤트 핸들러를 설정할 때는 함수 호출의 결괏값을 전달하는 것이 아니라 콜백 함수처럼  함수 자체를 전달

- 이벤트 객체 사용하기
리액트에서는 이벤트가 발생하면 이벤트 핸들러에게 이벤트 객체를 매개변수로 전달. 이벤트 객체에는 이벤트가 어떤 요소에서
어떻게 발생했는지에 관한 정보가 상세히 담겨 있음. Body컴포넌트에 2개의 버튼을 만들고, 이벤트가 발생하면
클릭한 버튼의 이름을 콘솔에 출력

function Body(){
  function handleOnClick(e){
    console.log(e.target.name);
  }
  return (
    <div className="body">
      <button name="A버튼" onClick={handleOnClick}>A 버튼
      </button>
      <button name="B버튼" onClick={handleOnClick}>B 버튼
      </button>
    </div>
  );
}
  export default Body;

-> 이벤트 객체의 target 프로퍼티에는 이벤트가 발생한 페이지의 요소가저장. 버튼 클릭 시 버튼의 이름이 콘솔에 ㅜㄹ력


컴포넌트와 상태
지금까지 값이 변하지 않는 정적인 리액트 컴포넌트를 만듦. 지금부터는 사용자의 행위나 시간 변동에 따라 값이 변하는
동적인 리액트 컴포넌트를 만듦.

- State 이해하기
State는 상태라는 뜻. 전구의 상태가 상태 변화에 따라 점등 또는 소등으로 변하는 것처럼 리액트 컴포넌트 또한 State 값에
따라 다른 결과를 렌더링 한다.

- State의 기본 사용법

1) useState로 State 생성하기
리액트에서는 함수 useState로 State를 생성한다. useState 문법은

const [light, setLight] = useState('off'); 와 같다.

useState를 호출하려면 2개의 요소가 담긴 배열을 반환한다. 이때 배열의 첫 번째 요소 light는 현재 상태의 값을 저장하고
있는 변수다. 이 변수를 'State 변수'라고 부른다. 다음으로 두 번째 요소인 setLight는 State 변수의 값을 변경하는,
즉 상태를 업데이트하는 함수다. 이 함수를 'set 함수'라고 부른다. useState를 호출할 때 인수로 값을 전달하면 이 값이
State의 초깃값이 된다.

Body 컴포넌트에서 숫차를 카운트할 수 있는 State 변수 count를 생성.

import {useState} from "react";

function Body(){
  const [count, setCount] = useState(0);  //0을 렌더링 해서 초깃값 0
  return (
   <div>
    <h2>{count}</h2>
   </div>
  );
}
  export default Body;

2)set 함수로 State 값 변경하기
컴포넌트에서 버튼을 하나 만ㄷ르고, 버튼을 클릭할 때만다 STate 값을 1씩 늘리기
import {useState} from "react";

function Body(){
  const [count, setCount] = useState(0); 
  const onIncrease = () => {
    setCount(count + 1);
  };
  return (
   <div>
    <h2>{count}</h2>
    <button onClick={onIncrease}>+</button>
   </div>
  );
}
  export default Body;

페이지에서 <+>버튼을 클릭하면 onIncrease이벤트 핸들러가 실행, onIncrease는 setCount를 호출하고, 인수로
현재의 count값에 1 더한 값을 전달. 그 결과 State 값은 1 증가

set 함수를 호출해 State 값ㅇ르 변경하면, 변경값을 페이지에 반영하기 위해 컴포넌트를 다시 렌더링 한다.
리액트에서 이것을 '컴포넌트의 업데이트'라고 표현한다. 컴포넌트가 페이지에 렌더링하는 값은 컴포넌트 함수의
반환값이다. 따라서 컴포넌트를 다시 렌더링한다고 함은 컴포넌트 함수를 다시 호출한다는 의미와 같다.

State값이 변해 컴포넌트를 다시 렌더링하는 것을 '리렌더' 또는 '리렌더링'이라고 한다. 리액트 컴포넌트는
자신이 관리하는 State값이 변하면 자동으로 리렌더 된다.

- State로 사용자 입력 관리하기
웹 사이트에서는 다양한 입력 폼을 제공하는데, 사용자는 이 입력 폼을 이용해 텍스트,숫자,날짜 등의 정보를 입력한다.

1) <input>태그로 텍스트 입력하기
텍스트, 전화번호, 날짜, 체크박스 등 여러 형식의 정보를 입력할 수 있다. <input> 태그로 텍스트를 입력하는 폼을
하나 만들고, 사용자가 텍스트를 입력할 때마다 콘솔에 출력하는 이벤트 핸들러를 구현

import {useState} from "react";

function Body(){
  const handleOnChange = (e) => {
    console.log(e.target.value);
  };
  return (
   <div>
    <input onChange={handleOnChange} />
   </div>
  );
}
  export default Body;
  
텍스트를 입력하는 즉시 콘솔에서도 입력한 텍스트를 출력. 지금은 사용자가 입력한 텍스트가 리액트 컴포넌트가 관리
하는 State에 저장되어 있는 않음. 따라서 만약 버튼을 클릭했을 때 사용자가 입력한 텍스트를 콘솔에 출력하는 등의
동작을 수행하게 하려면 돔 API를 이용하는 등 번거로운 작업이 별도로 요구 됨. 따라서 State를 하나 만들고 사용자가
폼에서 입력할 때마다 텍스트를 State 값으로 저장하게 수정.

import {useState} from "react";

function Body(){
  const [text, setText] = useState("");
  const handleOnChange = (e) => {
    setText(e.target.value);
  };
  return (
   <div>
    <input onChange={handleOnChange} />
    <div>{text}</div>
   </div>
  );
}
  export default Body;

2)<input>태그로 날짜 입력하기
<input>태그에서 type 속성을 "date"로 설정하면 날짜 형식의 데이터를 입력할 수 있다. State를 이용해 날짜 형식의
데이터를 입력 정보로 받아보겠다.

import {useState} from "react";

function Body(){
  const [date,setDate] = useState("");
  const handleOnChange = (e) => {
    console.log("변경된 값: ",e.target.value);
    setDate(e.target.value);
  };

  return (
   <div>
    <input type="date" value={date} onChange={handleOnChange} />
   </div>
  );
}
  export default Body;

날짜 형식으로 입력할 수 있는 입력 폼이 만들어짐.

3)드롭다운 상자로 여러 옵션 중에 하나 선택하기
<select>태그는 <option>과 함께 사용한다. 이 태그를 사용하면 드롭다운 메뉴로 여러 목록을 나열해 보여 주는 입력
폼이 만들어진다. 이 폼 목록에서 하나를 선택하면 해당 항목을 입력할 수 있다. 드롭다운 입력 폼에서 입력한 값을 State
로 어떻게 처리하는지 알아보자.

import {useState} from "react";

function Body(){
  const [option, setOption] = useState("");
  const handleOnChange = (e) => {
    console.log("변경된 값: ",e.target.value);
    setOption(e.target.value);
  };

  return (
   <div>
    <select value={option} onChange={handleOnChange}>
      <option key={"1번"}>1번</option>
      <option key={"2번"}>2번</option>
      <option key={"3번"}>3번</option>
    </select>
   </div>
  );
}
  export default Body;

4)글상자로 여러 줄의 텍스트 입력하기
<textarea> 태그는 사용자가 여러 줄의 텍스트를 입력할 때 사용하는 폼을 만든다. 이 폼은 웹 페이지에서 사용자가 자기
소개와 같이 여러 줄의 내용을 입력할 때 주로 활용된다. 

import {useState} from "react";

function Body(){
  const [text, setText] = useState("");
  const handleOnChange = (e) => {
    console.log("변경된 값: ",e.target.value);
    setText(e.target.value);
  };

  return (
    <div>
      <textarea value={text} onChange={handleOnChange} />
    </div>
  );
}
  export default Body;

5) 여러 개의 사용자 입력 관리하기
지금까지 리액트의 State를 이용해 컴포넌트에서 사용자의 입력을 처리하는 방법을 알아보았다.
그런데 회원 가입을 유도하는 페이지에서는 사용자의 입력 폼이 하나가 아니라 적게는 3개, 많게는 10개까지 되는 곳도 있다.
이번에는 여러 개의 사용자 입력을 State로 관리하는 방법을 살펴보자.

import {useState} from "react";

function Body(){
  const [name, setName] = useState("");
  const [gender, setGender] = useState("");
  const [birth, setBirth] = useState("");
  const [bio, setBio] = useState("");

  const onChangeName = (e) => {
    setName(e.target.value);
  };
  const onChangeGender = (e) => {
    setGender(e.target.value);
  };
  const onChangeBirth = (e) => {
    setBirth(e.target.value);
  };
  const onChangeBio = (e) => {
    setBio(e.target.value);
  };

  return (
    <div>
      <div>
        <input value={name} onChange={onChangeName} placeholder="이름" />
      </div>
      <div>
        <select value={gender} onChange={onChangeGender}>
          <option key={""}></option>
          <option key={"남성"}>남성</option>
          <option key={"여성"}>여성</option>
        </select>
      </div>
      <div>
        <input type="date" value={birth} onChange={onChangeBirth} />
      </div>
      <div>
        <textarea value={bio} onChange={onChangeBio} />
      </div>
    </div>
  );
}
  export default Body;

