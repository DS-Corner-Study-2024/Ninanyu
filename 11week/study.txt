1. useReducer 이해하기
리액트 훅 useReducer를 이용하면 컴포넌트에서 상태 변화 코드를 쉽게 분리할 수 있다.

[할 일 관리] 앱을 열고 component 폴더에 TestComp라는 임시 컴포넌트를 생성

import {useState} from "react";

function TestComp() {
    const [count, setCount] = useState(0);

    const onIncrease = () => {
        setCount(count + 1);
    };

    const onDecrease = () => {
        setCount(count -1);
    };

    return (
        <div>
            <h4>테스트 컴포넌트</h4>
            <div>
                <bold>{count}</bold>
            </div>
            <div>
                <button onClick={onIncrease}>+</button>
                <button onClick={onDecrease}>-</button>
            </div>
        </div>
    );
}
export default TestComp;


TestComp 컴포넌트는 임의의 수를 표시하는 카운트와 이 값을 1씩 늘리거나 줄이는 2개의 버트능로 구성한다.


- 상태 변화 코드란?
상태 변화 코드란 State 값을 변경하는 코드다. 앞서 만든 TestComp 컴포넌트의 함수 onIncrease와 onDecrease는 각각
변수 count의 값을 늘리거나 줄이므로 상태 변화 코드라고 할 수 있다.

상태 변화 코드를 컴포넌트에서 분리한다는 말은 컴포넌트 내부에 작성했던 상태 변화 코드를 외부에 작성한다는 뜻이다. 그러나
지금처럼 useState를 이용해 State를 만들만 상태 변화 코드를 분리할 수 없다. 둘 다 컴포넌트 안에서 선언했기 때문이다.
useState를 이용해 State를 생성하면 상태 변화 코드는 반드시 컴포넌트 안에 작성해야 한다. 반면 함수 useState를 사용하면
상태 변화 코드를 컴포넌트 밖으로 분리할 수 있다.

하나의 컴포넌트 안에 너무 많은 상태 변화 코드가 있으면 가독성을 해쳐 유지 보수를 어렵게 만들기 때문에 상태 변화 코드를
분리한다.


- useReducer의 기본 사용법
useReducer는 useState와 더불어 리액트 컴포넌트에서 State를 관리하는 리액트 훅이다. useReducer는 State 관리를 컴포넌트
내부가 아닌 외부에서 할 수 있게 만든다. 그래서 useState와 달리 State를 관리하는 상태 변화코드를 컴포넌트와 분리할 수 있다.
파일로도 분리 가능하다.

//TestComp.js
function TestComp() {
    return (
        <div>
            <h4>테스트 컴포넌트</h4>
            <div>
                <bold>0</bold>
            </div>
            <div>
                <button>+</button>
                <button>-</button>
            </div>
        </div>
    );
}
export default TestComp;


//TestComp.js
import {useReducer} from "react";

function reducer() {}

function TestComp(){
    const [count,dispatch] = useReducer(reducer,0);
    (...)
}
export default TestComp;

[useReducer의 용법]
const [count,dispatch] = useReducer(reducer,0);


<최적화>
- 최적화와 메모이제이션
'최적화'란 한마디로 웹 서비스의 성능을 개선하는 기술이다. 또한 프로그래밍에서 불필요하게 낭비되는 연산을 줄여 렌더링의
성능을 높이는 방법이다. 최적화가 잘 된 웹 서비스는 사용자를 불필요하게 기다리지 않게 만들며, 결국 서비스에 대한 사용자의
경험을 긍정적으로 만든다.
리액트는 성능면에서 매우 빠르고 브라우저의 불필요한 연산도 최소화한다. 성능 저하를 줄이는 것이 훌륭한 서비스를 만드는 방법이며,
프로그래머에게 요구되는 핵심 역량이다.
최적화 방법으로는 코드, 폰트, 이미지 파일의 크기를 줄이는 등 여러 기술이 있지만, 내용이 방대할 뿐 아니라 일부 방법은 확실한
정답이 없다. 이 책에서는 최적화의 기본이라 할 수 있는 '리액트의 연산 낭비'를 줄이는 데 초점을 둔다.
리액트 앱에서 연산 최적화는 대부분 '메모이제이션'기법을 이용한다. '메모이제이션'이란 말뜻 그대로 '메모하는 방법'이다.
메모이제이션은 특정 입력에 대한 결과를 계산해 메모리 어딘가에 저장했다가, 동일한 요청이 들어오면 저장한 결괏값을 제공해 빠르게
응답하는 기술이다. 결과적으로 이 기법을 이용하면 불필요한 연산을 줄여 프로그램의 실행 속도를 빠르게 만든다. 알고리즘을 공부하는
사람들은 이 기능을 동적 계획법이라 한다.

- 함수의 불필요한 재호출 방지하기
useMemo는 메모이제이션 기법을 이용해 연산의 결괏값을 기억했다가 필요할 때 사용함으로써 불필요한 함수 호출을 막아 주는
리액트 훅이다.

1. 할 일 분석 기능 추가하기
추가할 기능은 TodoList 컴포넌트에서 할 일 아이템을 분석하는 일이다. 이 기능은 추가한 할 일 아이템이 모두 몇 개인지, 또 완료
아이템과 미완료 아이템은 각각 몇 개인지 검색해 페이지에 렌더링한다.

//TodoList.js
(...)
const TodoList = ({todo, inUpdate, onDelete}) => {
    (...)
    const analyzeTodo = () => {
        const totalCount = todo.length;
        const doneCount = todo.filter((it) => it.isDone).length;
        const notDoneCount = totalCount - doneCount;
        return {
            totalCount,
            doneCount,
            notDoneCount
        };
    };
    (...)
};
export default TodoList;


- 최적화할 때 유의할 점
1. 최적화는 항상 마지막에
2. 모든 것을 최적화할 필요는 없다
3. 컴포넌트 구조를 잘 설계했는지 다시 한번 돌아보기
4. 최적화는 여기서 끝나지 않는다.